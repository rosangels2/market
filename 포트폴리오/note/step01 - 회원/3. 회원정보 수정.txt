1. 회원정보 수정 페이지로 이동하는 a태그를 생성
예시) home.jsp
	<a href="<%=request.getContextPath()%>/member/modify">회원 정보 수정</a>

2. 해당 URI를 매핑하는 메서드를 컨트롤러에서 생성
예시)
	//회원 정보 수정
	@RequestMapping(value = "/member/modify", method = RequestMethod.GET)
	public String modifyGet(Model model) {
		
		return "member/modify";
	}
	@RequestMapping(value = "/member/modify", method = RequestMethod.POST)
	public String modifyPost(Model model) {
		
		return "redirect:/member/modify";
	}

3. 해당 경로에 jsp파일을 생성 후 css 추가
예시) views/member/modify.jsp
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta http-equiv="X-UA-Compatible" content="ie=edge">
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.css">
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css" integrity="sha384-oS3vJWv+0UjzBfQzYUhtDYW+Pj2yciDJxpsK1OYPAYjqT085Qq/1cq5FLXAZQ7Ay" crossorigin="anonymous">
	<script src="https://code.jquery.com/jquery-3.4.1.js"></script>
	<title>회원가입</title>
<style>
input.form-control:focus{
	color: green;
	background-color: aqua;
	font-size: 30px;
}
input.form-control:hover{
	background-color: wheat;
}
.container{
	border: 1px solid black;
	width: 50%;
}
i.fab{
	font-size: 100px;
	color: red;
}
</style>
</head>
<body>
	<div class="row m-5">
		<div class="container offset-4 col-4">
			<div class="offset-3"> <h1>회원 정보 수정</h1></div>
			<form method="post" action="">
				<div class="form-group">
					<label for="usr">아이디</label>
					<input type="text" class="form-control col-7" id="id" placeholder="아이디" name="id">
				</div>
				<div class="form-group">
					<label for="pwd">현재 비밀번호</label>
					<input type="password" class="form-control col-7" id="oPw" placeholder="비밀번호" name="oPw">
				</div>
				<div class="form-group">
					<label for="pwd">새 비밀번호</label>
					<input type="password" class="form-control col-7" id="pw" placeholder="비밀번호" name="pw">
				</div>
				<div class="form-group">
					<label for="pwdRe">새 비밀번호 확인</label>
					<input type="password" class="form-control col-7" id="pw1" placeholder="비밀번호 확인" name="pw1">
				</div>
				<div class="form-group">
					<label for="sel1">성별</label>
					<select class="form-control col-4" id="sel1" name="gender">
						<option value="남">남자</option>
						<option value="여">여자</option>
					</select>
				</div>
				<div class="form-group">
					<label for="email">이메일</label>
					<input type="text" class="form-control" id="email" placeholder="이메일" name="email">
				</div>
				<div class="form-group">
					<label for="email">이름</label>
					<input type="text" class="form-control" id="name" placeholder="이름" name="name">
				</div>
				<button type="button" class="btn btn-dark float-right" id="cancel" name="cancel">취소</button>
				<button type="submit" class="btn btn-primary float-right" id="ok" name="ok">입력완료</button>
			</form>
		</div>
	</div>
</body>
</html>

4. jsp에서 입력된 정보가 제대로 전송되는지 컨트롤러에서 출력하여 확인
예시)
	@RequestMapping(value = "/member/modify", method = RequestMethod.POST)
	public String modifyPost(Model model, MemberVO mVo, String oPw) {
		System.out.println("modify mVo : " + mVo);
		System.out.println("modify oPw : " + oPw);
		return "redirect:/member/modify";
	}

5. jsp에서 전송받은 정보를 매개변수로 사용하는 서비스 인터페이스를 호출
예시)
	@RequestMapping(value = "/member/modify", method = RequestMethod.POST)
	public String modifyPost(Model model, MemberVO mVo, String oPw) {
		System.out.println("modify mVo : " + mVo);
		System.out.println("modify oPw : " + oPw);
		if(memberService.modify(mVo, oPw)){
			return "redirect:/";
		}
		return "redirect:/member/modify";
	}

6. quick fixed를 통해 서비스 인터페이스를 호출
예시)
	boolean modify(MemberVO mVo, String oPw);

7. quick fixed를 통해 인터페이스를 구현하고 DAO 인터페이스를 호출
예시)
	@Override
	public boolean modify(MemberVO mVo, String oPw) {
		memberDao.modify(mVo);
		return true;
	}

8. quick fixed를 통해 DAO 인터페이스를 생성
예시)
	void modify(MemberVO mVo);

9. 해당 인터페이스를 연결하는 쿼리문을 MemberMapper.xml에 생성
예시)
<update id="modify">
	update member
	set pw = #{pw}, gender = #{gender}, email = #{email}, name = #{name}
	where id = #{id}
</update>

10. DB에서 제대로 정보가 수정됐는지 확인

11. 제대로 수정이 일어난다면 MemberServiceImp.java에서 예외처리와 조건식을 추가
예시)
	@Override
	public boolean modify(MemberVO mVo, String oPw) {
		if(mVo == null || oPw == null){
			return false;
		}
		MemberVO oVo = memberDao.getMember(mVo.getId());
		if(!oVo.getPw().equals(oPw)){
			return false;
		}
		memberDao.modify(mVo);
		return true;
	}

12. 회원 정보 수정 성공 여부에 따라 화면을 다르게 반환하도록 컨트롤러의 코드를 수정
예시)
	@RequestMapping(value = "/member/modify", method = RequestMethod.POST)
	public String modifyPost(Model model, MemberVO mVo, String oPw) {
		System.out.println("modify mVo : " + mVo);
		System.out.println("modify oPw : " + oPw);
		if(memberService.modify(mVo, oPw)){
			return "redirect:/";
		}
		return "redirect:/member/modify";
	}
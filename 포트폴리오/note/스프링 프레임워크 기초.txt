views,URI(JSP) -> 컨트롤러(class) -> 서비스(인터페이스,구현 클래스) -> DAO(인터페이스, 구현 xml 또는 클래스) -> vo클래스 -> DB

JSP(URI) - 컨트롤러에게 기능 요청

컨트롤러 - 필요한 작업에 맞는 메서드를 서비스나 DAO에서 호출하여 실행
@Autowired - 생성자 없이 하나의 객체를 만들어서 해당 클래스나 인터페이스의 객체를 사용할 때 자동으로 연결
@RequestMapping - 요청한 URI value값과 method 방식에 따라 실행되는 메서드를 연결시킨다
private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
//실행된 클래스와 컨트롤러를 확인하기 위해 현재 정보를 상수인 클래스 멤버변수에 저장

서비스 - 컨트롤러에서 입력받은 기능을 실행하기 위해 인터페이스를 통해 기능을 분류
@Service	//서비스로 인식시키기 위한 키워드

DAO - SQL문을 사용하여 DB에 접근할 수 있는 파일(기능에 따라 서비스는 생략 가능하지만 DAO는 DB연결을 위해 필수)
root-context.xml - 인터페이스를 연결시켜주는 역할
Mapper.xml - DAO의 인터페이스의 파일명과 인터페이스명, 리턴타입 등을 입력하여 원하는 인터페이스를 호출

vo(value object)클래스 - 많은 데이터를 한번에 처리하기 위해 사용하는 클래스
	->데이터를 한번에 처리하기 위해 어느 곳에서든 사용하지만 DB에서 데이터를 가져오거나 보내줄 때 주로 사용 
	->멤버변수를 데이터의 속성명과 일치시키는 게 편하다

DB - 필요한 데이터들을 모아놓은 데이터베이스





폴더 구조

controller, dao, service, vo
spring > scr/main/java > kr.green.spring.controller > HomeController.java
		       kr.green.spring.dao > MemberDAO.java
		       kr.green.spring.service > MemberService.java
					   MemberServiceImp.java
		       kr.green.spring.vo > MemberVO.java

mapper
spring > src/main/resources > mappers > MemberMapper.xml
			  log4j.xml

jsp, web, root-context, servlet-context
spring > src > main > webapp > WEB-INF > spring > appServle > servlet-context.xml
				      	        root-context.xml
			         	         views > home.jsp
					       signup.jsp
					       signin.jsp
					       member.jsp
			         	         web.xml
pom
spring > target > m2e-wtp > web-resources > META-INF > maven > kr.green > spring > pom.properties
									     pom.xml
	pom.xml





파일 연결 순서

1. 컨트롤러
컨트롤러에서 원하는 URL에 연결하는 메서드 추가(프로젝트 -> /src/main/java -> ***.controller -> ***Controller.java 파일)
예시)
@Controller	//annotation - 입력하면 controller로 인식(없을 경우 일반 클래스로 인식)
public class HomeController {
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);	//콘솔에 메세지를 보여주기 위해 선언
	
	@Autowired	//생성자를 대신 사용해주는 기능(하나의 객체를 만들어서 해당 클래스의 객체를 사용할 때 자동 연결)
	MemberDAO stdDao;	

	@RequestMapping(value = "/signin", method = RequestMethod.GET)
	public String signinGet(){
		logger.info("회원가입 진행 완료");
		return "signin";	//리턴할 jsp파일 입력
	}
}


2. JSP(HTML문을 이용한 화면 구현)
return하는 JSP파일 생성 후 구현할 HTML문 입력(프로젝트/src/main/webapp/WEB-INF/views/***.jsp파일 생성)


3. 서비스(인터페이스, 구현 클래스)
 - 서비스 파일에 해당 jsp파일을 사용하는 인터페이스를 생성
예시)
public interface MemberService {
	public boolean signup(MemberVO mVo);	//기존에 아이디가 있어 가입에 실패했을 경우 false
	public boolean signin(MemberVO mVo);
}
 - 서비스 파일에 인터페이스를 구현하는 클래스를 생성하여 @Service, @Autowired, @Override 사용 후 구현
예시)
@Service		//서비스 기능으로 인식시키기 위한 키워드
public class MemberServiceImp implements MemberService{

	@Autowired
	MemberDAO memberDao;
	
	@Override
	public boolean signup(MemberVO mVo) {
		//기존에 해당 아이디가 있는지 체크
		//있으면 false 반환하고 종료 없으면 회원가입 진행
		if(mVo == null){
			return false;
		}
		mVo.setName("");
		if(memberDao.getMember(mVo.getId()) != null) {
			return false;
		}
		memberDao.signup(mVo);
		return true;
		
	}
}
 - quick fixed를 통해 DAO의 인터페이스에 추가할 jsp에 관한 인터페이스를 구현


4. DAO(인터페이스와 구현 클래스, Mapper.xml)
 - jsp와 vo클래스에 관한 인터페이스를 구현
 - 인터페이스를 구현한 클래스 또는 Mapper.xml 


5. DB(vo클래스)
 - vo클래스를 통해 DB의 객체를 한번에 가져올 수 있는 클래스를 구현(멤버변수와 getter/setter/toString 구현)


인터페이스는 객체를 생성할 수 있지만 인터페이스로 객체를 생성할 수 없다
MemberService mS = new MemberService();	//MemberService는 인터페이스이기 때문에 객체 생성 불가
MemberService mS = new MemberServiceImp();    //인터페이스를 구현한 클래스를 통해 객체 생성 가능
						->클래스는 기본적으로 생성자가 존재하기 때문에





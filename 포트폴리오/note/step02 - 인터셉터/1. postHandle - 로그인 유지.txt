Interceptor를 이용한 유저 정보 세션에 저장하기

posthandle - 컨트롤러에서 JSP로 정보를 전송할 때 작동
prehandle - URI에서 컨트롤러로 정보를 전송할 때 작동

1. 패키지 생성 - 경로 : 프로젝트>src/main/java 폴더에 생성
국가.회사명.프로젝트명.interceptor 패키지 생성
예시) kr.green.spring.interceptor

2. 로그인 시도 시 실행할 interceptor 클래스 생성
LoginInterceptor 클래스 생성 및 postHandle 메소드 오버라이딩
LoginInterceptor 클래스 생성(Superclass : HandlerInterceptorAdapter)
예시)
@Override
public void postHandle(
    HttpServletRequest request, 
    HttpServletResponse response, 
    Object handler, 
    ModelAndView modelAndView)
    throws Exception {
    ModelMap modelMap = modelAndView.getModelMap();
    MemberVO user = (MemberVO)modelMap.get("user");		//User user = (User)modelMap.get("user");에서 형변환하여 사용

	if(user != null){	//user 정보가 있다면 
	    HttpSession session = request.getSession();	//새로운 세션에
	    session.setAttribute("user", user);	//변수 user에 유저 정보를 저장
    }
}

3. LoginInterceptor를 servlet-context.xml에 interceptor로 등록
예시)	kr.green.spring.interceptor.LoginInterceptor 클래스를 bean에 등록
	<!-- 로그인 정보를 저장할 인터셉터 등록 -->
	<beans:bean id="loginInterceptor" 
		class="kr.green.spring.interceptor.LoginInterceptor">
	</beans:bean>
	
	<!-- 로그인 정보를 저장할 경로 -->
   	 <interceptor>
      		<mapping path="/"/>		<!-- URI 경로에 맞는 인터셉터를 실행	-->
   	 	<beans:ref bean="loginInterceptor"/>
  	 </interceptor>

실제 예시)
	<!-- 로그인 정보를 저장할 인터셉터 등록 -->
	<beans:bean id="loginInterceptor" 
		class="kr.green.spring.interceptor.LoginInterceptor">
	</beans:bean>	<!-- 패키지명.클래스명 -->

	<interceptors>
		<!-- 로그인 정보를 저장할 경로 -->
		<interceptor>
			<mapping path="/signin"/>	<!-- URI 경로에 맞는 인터셉터를 실행	-->
			<beans:ref bean="loginInterceptor"/>	<!-- 위쪽 beans의 id와 일치해야 한다 -->
		</interceptor>
	</interceptors>

4. 로그인 컨트롤러에서 유저 정보를 Model에 넘기기
예시)
	@RequestMapping(value = "/signin", method = RequestMethod.POST)
	public String signinPost(Model model, MemberVO mVo) {
		System.out.println("signin mVo : " + mVo);
		MemberVO user = memberService.signin(mVo);
		System.out.println("signin user : " + user);
		if(user == null){
			return "redirect:/signin";
		}
		model.addAttribute("user", user);
		return "redirect:/";
	}

5. JSP에서 ${user}를 통해 세션이 저장됐을 때의 객체 정보를 확인
예시)
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<html>
<head>
	<title>Home</title>
</head>
<body>
	<a href="<%=request.getContextPath()%>/signup">회원가입</a>
	<a href="<%=request.getContextPath()%>/signin">로그인</a>
	<a href="<%=request.getContextPath()%>/member/modify">회원 정보 수정</a>
	${user}
</body>
</html>

출력 예시)
	MemberVO [id=1, pw=1, gender=남, email=1@1, name=홍길동]

6. JSP에서 세션에 객체가 저장돼 있는지 여부에 따라 html 구성을 다르게 적용 가능(로그인 여부에 따라 다르게 화면을 표시)
예시) home.jsp
	<!-- eq = equals(같다), ne = !equals(같지 않다) -->
	<c:if test="${user eq null}">	<!-- test = 조건식(해당 조건식 결과가 true이면 해당 코드를 실행하며, c:if는 else가 없다) -->
		<a href="<%=request.getContextPath()%>/signup">회원가입</a>
		<a href="<%=request.getContextPath()%>/signin">로그인</a>
	</c:if>
	<c:if test="${user ne null}">
		<a href="<%=request.getContextPath()%>/member/modify">회원정보 수정</a>
		<a href="<%=request.getContextPath()%>/board/list">게시판</a>
	</c:if>





+ 로그아웃 기능
1. jsp에서 로그아웃 버튼을 생성
예시)
	<a href="<%=request.getContextPath()%>/signout" class="float-right" style="color : silver;">로그아웃</a>

2. 해당 경로를 매핑하는 컨트롤러 생성
예시)
    @RequestMapping(value= "/signout")
    public String signout(){
    	return "redirect:/";
    }

3. 매개변수로 서버 정보가 담긴 HttpServletRequest 클래스의 객체를 추가
예시)
    @RequestMapping(value= "/signout")
    public String signout(HttpServletRequest r) {
    	return "redirect:/";
    }

4. HttpServletRequest의 객체에 담긴 Session 정보에서 변수 user를 제거
예시)
    @RequestMapping(value= "/signout")
    public String signout(HttpServletRequest r) {
    	r.getSession().removeAttribute("user");
    	return "redirect:/";
    }
1. AuthInterceptor 생성 - 로그인이 안됐을 시 지정한 URI로의 접근을 막고 페이지를 강제 이동
HandlerInterceptorAdapter를 상속받은 AuthInterceptor 생성
preHandle 인터셉터 - URI를 통해 컨트롤러로 접근할 때 실행
패키지 생성 및 클래스 생성
예시) kr.green.프로젝트명.interceptor / AuthInterceptor클래스 (Superclass : HandlerInterceptorAdapter)

public class AuthInterceptor extends HandlerInterceptorAdapter{
	
	@Override
	public boolean preHandle(	//URI에서 컨트롤러로 정보를 전송할 때 작동하는 interceptor
			HttpServletRequest request, 
			HttpServletResponse response, 
			Object handler)
			throws Exception {
		HttpSession session = request.getSession();	//현재 요청된 페이지의 세션 객체를 가져와서  새 세션 객체에 저장한다
		Object user = session.getAttribute("user");	//세션에서 변수 user를 가져와 객체 Object객체 user에 저장한다
		if(user == null) {	//로그인이 안돼있다면
			response.sendRedirect(request.getContextPath()+"/");	//response.sendRedirect를 통해 해당 URI의 경로로 이동한다
		}
		return true;	//조건식에 해당되지 않는다면 true를 반환해 그대로 전송한다
	}

}

2. servlet-context.xml에 AuthInterceptor beans을와 interceptor를 추가
예시)
	<!-- 로그인이 안됐을 때 접근을 막는 인터셉터 등록 -->
	<beans:bean id="authInterceptor" 
		class="kr.green.프로젝트명.interceptor.AuthInterceptor">		<!-- 패키지명.클래스명 -->
	</beans:bean>

	<!-- 로그인이 안됐을 때 접근 제한 -->
   	<interceptor>
	       	<mapping path="/board/*"/>	<!--	<mapping path="/"/>	 URI 경로에 맞는 인터셉터를 실행		-->
	     	<beans:ref bean="authInterceptor"/>		<!-- 위쪽 beans의 id와 일치해야 한다 -->
	</interceptor>

3. UnauthInterceptor 생성 - 로그인이 됐을 시 지정한 URI로의 접근을 막고 페이지를 강제 이동
HandlerInterceptorAdapter를 상속받은 UnauthInterceptor 생성
preHandle 인터셉터 - URI를 통해 컨트롤러로 접근할 때 실행
패키지 생성 및 클래스 생성
예시) kr.green.프로젝트명.interceptor / UnauthInterceptor클래스 (Superclass : HandlerInterceptorAdapter)

public class AuthInterceptor extends HandlerInterceptorAdapter{
	
	@Override
	public boolean preHandle(	//URI에서 컨트롤러로 정보를 전송할 때 작동하는 interceptor
			HttpServletRequest request, 
			HttpServletResponse response, 
			Object handler)
			throws Exception {
		HttpSession session = request.getSession();	//현재 요청된 페이지의 세션 객체를 가져와서  새 세션 객체에 저장한다
		Object user = session.getAttribute("user");	//세션에서 변수 user를 가져와 객체 Object객체 user에 저장한다
		if(user != null) {	//로그인이 돼있다면
			response.sendRedirect(request.getContextPath()+"/");	//response.sendRedirect를 통해 해당 URI의 경로로 이동한다
		}
		return true;	//조건식에 해당되지 않는다면 true를 반환해 그대로 전송한다
	}

}

4. servlet-context.xml에 UnauthInterceptor beans을와 interceptor를 추가
예시)
	<!-- 로그인이 됐을 때 접근을 막는 인터셉터 등록 -->
	<beans:bean id="unAuthInterceptor" 
		class="kr.green.프로젝트명.interceptor.UnauthInterceptor">
	</beans:bean>

	<!-- 로그인이 됐을 때 접근 제한 -->
	<interceptor>
      		 <mapping path="/signin"/>	<!--	<mapping path="/"/>	 URI 경로에 맞는 인터셉터를 실행		-->
      		 <mapping path="/signup"/>
    		 <beans:ref bean="unAuthInterceptor"/>		<!-- 위쪽 beans의 id와 일치해야 한다 -->
	</interceptor>	

5. 해당 URI로 접근을 시도해서 강제 이동이 적용되는지 확인
예시) 로그인 중이 아닐 시(AuthInterceptor 실행)
http://localhost:8080/practice/board/ 이하의 경로로 접근 -> http://localhost:8080/practice/로 강제 이동(회원가입, 로그인만 표시)

예시) 로그인 중(UnauthInterceptor 실행)
http://localhost:8080/practice/signin 또는 http://localhost:8080/practice/signup으로 접근 -> http://localhost:8080/practice/로 강제 이동(회원정보 수정, 게시판만 표시)
